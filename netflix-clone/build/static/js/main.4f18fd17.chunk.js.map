{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","request","get","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovie","fetchHorrorMovie","fetchComedyMovie","fetchRomanceMovie","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4f18fd17.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst BASE_URL = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = axios.get(fetchUrl);\n      setMovies((await request).data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row-posters\">\n        {movies.map((movie) => (\n          <img\n            className={`row-poster ${isLargeRow && \"row-posterLarge\"}`}\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            src={`${BASE_URL}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY = \"39f6fda25b271e2bb9c284c2176f42a0\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovie: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchHorrorMovie: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchComedyMovie: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchRomanceMovie: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport \"./Banner.css\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      console.log(requests.fetchNetflixOriginals);\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner_contents\">\n        <h1 className=\"banner_title\">\n          {movie?.name || movie?.name || movie?.original_name}\n        </h1>\n        <div className=\"banner_buttons\">\n          <button className=\"banner_button\">Play</button>\n          <button className=\"banner_button\">My List</button>\n        </div>\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 180)}</h1>\n      </div>\n      <div className=\"banner_fadeBottom\"></div>\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Nav.css\";\n\nfunction Nav() {\n  const [show, handleShow] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else {\n        handleShow(false);\n      }\n      return () => {\n        window.removeEventListener(\"scroll\");\n      };\n    });\n  }, []);\n\n  return (\n    <div className={`nav ${show && \"nav-black\"}`}>\n      <img\n        className=\"nav-logo\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1200px-Netflix_2015_logo.svg.png\"\n        alt=\"Netflex Logo\"\n      />\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\nimport requests from \"./requests\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINAL\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      ></Row>\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}></Row>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}></Row>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovie}></Row>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovie}></Row>\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovie}></Row>\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovie}></Row>\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchRomanceMovie}></Row>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}